// Code generated by mockery v2.7.4. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/thyagofr/tcc/api/domain/entity"
)

// MockNotificationRepository is an autogenerated mock type for the NotificationRepository type
type MockNotificationRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *MockNotificationRepository) FindAll() ([]*entity.Notification, error) {
	ret := _m.Called()

	var r0 []*entity.Notification
	if rf, ok := ret.Get(0).(func() []*entity.Notification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByDeviceID provides a mock function with given fields: deviceID
func (_m *MockNotificationRepository) FindByDeviceID(deviceID string) ([]*entity.Notification, error) {
	ret := _m.Called(deviceID)

	var r0 []*entity.Notification
	if rf, ok := ret.Get(0).(func(string) []*entity.Notification); ok {
		r0 = rf(deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: notification
func (_m *MockNotificationRepository) Insert(notification *entity.Notification) error {
	ret := _m.Called(notification)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Notification) error); ok {
		r0 = rf(notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: notificationID
func (_m *MockNotificationRepository) Remove(notificationID string) error {
	ret := _m.Called(notificationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(notificationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: notification
func (_m *MockNotificationRepository) Update(notification *entity.Notification) error {
	ret := _m.Called(notification)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Notification) error); ok {
		r0 = rf(notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
